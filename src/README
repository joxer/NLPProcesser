NLPProcesser - Trivago assessment

This Program concern about a dictionary and a set of reviews you can supply as input.
The programming language choosen is Java, because it's a fast language, a lot people can read and program it
and it can work nearly everywhere.
There are some external jars, jUnit to test the code, A NaiveBayesClassifier library I found on Github, and a parser
for the command line made by Apache.

###################

Input of program:

The dictionary is a json object organized this way:

{
    "nouns": [
        {
            "value": "room",
            "topic": "room"
        },

        ...

        {
            "value": "apartment",
            "topic": "room"
        },
    ],
    "adjective": [
        {
            "value": "great",
            "rate": 0.5
        },
        ...
        {
            "value": "never",
            "rate": -0.5
        },
    ]
}

Each part of phrase has his own JSONArray. Each value of the array as a JSONObject made with a value that point to
the value represented.
Nouns also have a topic, it's the general concept they are trying to figuring, so for example "room" and "apartment"
and "chamber" resemble the idea of a room.
Adjective have a rate that vary from -0.99 to 0.99 that is the difference between a good and a bad adjective, using
0.0 as middle value.
Other part of the phrase can be added to represent verbs, adverbs, ecc.



The reviews file is a json object made this way:

{

"url":"http://www.tripadvisor.co.uk/Hotel_Review-g189852-d1056936-Reviews-Brunnby_Hotel-Stockholm.html",
"phrases":

[
  "This is a terrible place. Staff just want to get money. The bedrooms are dirty, everythig is not good.
  Coffee is not free. I think that the beds are not changed really often. I could not sleep in this horrible hotel.",

  "One staff member was kind, the rest were sullen and frustrated. The places staircase is horrible and impossibly
   to get around with bags. Couldn't wait to leave. If your considering hostels around amsterdam, consider sleeping
   under a red light district windows welcome mat "
  ]

}


Url is just an info for the reader, it's not used by the program. Phrases is an Array of string.

###################


Structure and development of the program:


The program itself is simple, is structured in this way:

1) Load review and dictionary
2) Take each review and pass it to a chain of processing
3) the final value is generated and printed out

The load of the dictionary has been made using a class for storage called WordsStorage. It takes the dictionary, as
json format, in input and load it in several maps. Also it construct the concepts map, where concepts are an idea
behind several words.

The program has several level of output. It can be changed before compiling in the Logger class.
The dictionary class has a loader that get all values from json file and put them in two maps. One for the concepts
and one for the words.

The interface "Criteria" has 3 simple methods that all implementation to be created should follow.
They are:

score() : get the final score in the phrase
process() : process the phrase using the istanced criterion
setInput() : set the input of the class

There's two way to process the program, through a count of good adjectives and bad adjectives or through a bayes filter.

The "frequencies" way was written all by me. The bayes way use an external class, because i didn't got time to write it
on my own.

The "frequencies" way is organized this way:

The AnalyzerInfo is a class organized as a Chain of Methods. Each step of it progress the computation of the review.
I've used this pattern because it's easy to add new criteria of judging, removing the, plugging others, and each step is
independent from the others. The only structure passed between them is an info structure holding all the information
about sentence

I've created on my own a simple processing chain build up as:

- Tokenize String
- Find Subject of the phrases
- Find good adjective
- Find bad adjective
- Find Minimum sentence (just an early implementation, it just connect subject to the nearest adjectives)
- Computing the final result
- Log the result

"Tokenize String" rely on a regular expression, it's very simple and not quite efficient. I think it could be faster.
Also it didn't check for a negation before an adjective, it should be capable of doing it.

"Find Subject" relies on a simple lookup with token find in the previous step and the dictionary provided when the
program load.

"Find Good adjective" is a filter on adjectives to find the good ones
"Find Bad adjective" is a filter on adjectives to find the bad ones

"Find minimum sentence" is a like an idea for now, it just split the phrase as it found stops and search for subject
and adjective in this split. It will create then an aggregate of Nouns and adjective that can be virtually connected.
The idea is to expand this program and pass this kind of result to a training algorithm that can learn how much bad is
a thing in the review.

"Computing result" is the weighted average of the total adjectives. A little fixed is did by the multiplication by a
constant in the case the positive adjectives are more than the negatives ones or vice versa.

The "Bayesian" way is organized this way:

I got an opensource library from internet (https://github.com/datumbox/NaiveBayesClassifier) ,
where you have to pass as input a dictionary of good or bad adjective as a filter.
This way it recognize in a good way if a phrase is good or bad, but it doesn't get the general idea of what
the phrase is talking about. There isn't a preprocesser to see what's the subject of the phrase. So it's a very naive
filter, filtering only about the general meaning of the phrase.


###################

Testing and Result:

As output there's only the idea if a phrase is good or bad, otherwise in the class there's a score defined from -1 to 1.
-1 is the worst value, so a bad review, 1 is the best review, so a good review. The bayes filter only thinks in a boolean
way so good or bad, the "frequencies" way thinks in probability so has floating points value.

I got some real reviews from tripadvisor and putted them in a file as input for the program.
The results are good in both implementation, it returns a good idea of the hotel for each review and bring out nearly
exact result.
I found that the bayes library I got, isn't really accurate as well as my code, it can lead to false positive sometimes.
Anyway it's an idea to show how my library and program can be expanded easily with new criteria.

The next step to expand the program should be about concerning if an adjective is about a specific subject and get a
general idea of what's bad or good in a review.

